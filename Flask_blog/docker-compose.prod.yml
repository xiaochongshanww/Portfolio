version: '3.9'
services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    image: flask-blog-backend:prod
    env_file: .env
    environment:
      FLASK_CONFIG: production
      LOG_LEVEL: INFO
      AUTO_MIGRATE: 1
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      meili:
        condition: service_started
    volumes:
      - uploads:/app/backend/uploads_store
      - backups:/app/backend/backups
      - metadata:/app/backend/metadata
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - appnet
  celery_worker:
    image: flask-blog-backend:prod
    command: celery -A app.tasks.celery_app worker -l info
    env_file: .env
    environment:
      FLASK_CONFIG: production
    depends_on:
      - backend
      - redis
    networks:
      - appnet
  celery_beat:
    image: flask-blog-backend:prod
    command: celery -A app.tasks.celery_app beat -l info
    env_file: .env
    environment:
      FLASK_CONFIG: production
    depends_on:
      - backend
      - redis
    networks:
      - appnet
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    image: flask-blog-frontend:prod
    depends_on:
      - backend
    environment:
      - VITE_API_BASE=/api/v1
    networks:
      - appnet
  db:
    image: mysql:8.4
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --skip-name-resolve
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root}
      MYSQL_DATABASE: blog
      MYSQL_USER: blog
      MYSQL_PASSWORD: blog
    volumes:
      - mysqldata:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 60s
    networks:
      - appnet
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD:-CHANGE-ME-REDIS-PASSWORD}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-CHANGE-ME-REDIS-PASSWORD}
    volumes:
      - redisdata:/data
    networks:
      - appnet
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
  meili:
    image: getmeili/meilisearch:v1.7
    environment:
      MEILI_NO_ANALYTICS: 'true'
      MEILI_MASTER_KEY: ${MEILISEARCH_MASTER_KEY:-CHANGE-ME-MEILI-MASTER-KEY}
    volumes:
      - meilidata:/meili_data
    networks:
      - appnet
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7700/health"]
      interval: 10s
      timeout: 5s
      retries: 10
  gateway:
    image: nginx:1.27-alpine
    depends_on:
      - frontend
      - backend
    volumes:
      - uploads:/var/www/uploads:ro
      - ./deploy/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "80:80"
    networks:
      - appnet

volumes:
  mysqldata:
  meilidata:
  redisdata:
  uploads:
  backups:
  metadata:

networks:
  appnet:
    driver: bridge
