# HTTPS/SSL 生产配置
# 需要先获取 SSL 证书 (Let's Encrypt 推荐)

# HTTP 重定向到 HTTPS
server {
  listen 80;
  server_name _;
  return 301 https://$host$request_uri;
}

# HTTPS 主配置
server {
  listen 443 ssl http2;
  server_name _;

  # SSL 证书配置 (需要替换为实际证书路径)
  ssl_certificate /etc/ssl/certs/your-domain.crt;
  ssl_certificate_key /etc/ssl/private/your-domain.key;
  
  # SSL 安全配置
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
  ssl_prefer_server_ciphers off;
  ssl_session_cache shared:SSL:10m;
  ssl_session_timeout 10m;
  ssl_session_tickets off;
  
  # HSTS (HTTP Strict Transport Security)
  add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

  # 安全头配置
  add_header X-Frame-Options "SAMEORIGIN" always;
  add_header X-Content-Type-Options "nosniff" always;
  add_header X-XSS-Protection "1; mode=block" always;
  add_header Referrer-Policy "strict-origin-when-cross-origin" always;
  add_header Permissions-Policy "camera=(), microphone=(), geolocation=()" always;
  
  # CSP 内容安全策略 (更严格的HTTPS版本)
  add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self'; media-src 'self'; object-src 'none'; frame-ancestors 'self'; upgrade-insecure-requests;" always;

  # 前端静态
  root /usr/share/nginx/html;
  index index.html;

  # Gzip 压缩
  gzip on;
  gzip_vary on;
  gzip_min_length 10240;
  gzip_proxied expired no-cache no-store private must-revalidate auth;
  gzip_types
    text/plain
    text/css
    text/xml
    text/javascript
    application/javascript
    application/xml+rss
    application/json
    image/svg+xml;

  # 缓存策略 (HTTPS版本)
  location ~* \.(js|css)$ { 
    expires 30d; 
    add_header Cache-Control "public, max-age=2592000, immutable"; 
    add_header X-Content-Type-Options "nosniff";
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
  }
  location ~* \.(png|jpg|jpeg|gif|webp|svg|ico)$ { 
    expires 30d; 
    add_header Cache-Control "public, max-age=2592000, immutable";
    add_header X-Content-Type-Options "nosniff";
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
  }

  # API 代理 (HTTPS版本)
  location /api/ {
    proxy_pass http://backend:8000/api/;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto https;
    proxy_set_header X-Forwarded-Host $host;
    proxy_read_timeout 60s;
    
    # 添加安全头到 API 响应
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
  }

  location /public/ {
    proxy_pass http://backend:8000/public/;
    proxy_set_header X-Forwarded-Proto https;
  }

  # 上传文件 (共享卷，HTTPS版本)
  location /uploads/ {
    alias /var/www/uploads/;
    add_header Cache-Control "public, max-age=86400";
    add_header X-Content-Type-Options "nosniff";
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    
    # 防止执行上传的脚本文件
    location ~* \.(php|pl|py|js|cgi|sh|bat)$ {
      deny all;
    }
  }

  # 单页应用回退
  location / {
    try_files $uri $uri/ /index.html;
  }

  # 健康检查
  location = /healthz { 
    return 200 'ok'; 
    add_header Content-Type text/plain;
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
  }

  # 隐藏 nginx 版本信息
  server_tokens off;
}